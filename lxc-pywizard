#!/usr/bin/python
import platform
import subprocess
import argparse
import os

###########################################
myvars = {
   'Os':'Debian',
   'VGName':'Default',
   'Dist':'wheezy',
   'Arch':'amd64',
   'Cache':'/var/cache/lxc/test123456/',
   'RemoteUrl':'http://ftp.ca.debian.org/debian',
   'Packages':'ifupdown,locales,libui-dialog-perl,dialog,netbase,net-tools,iproute,openssh-server,vim',
}

###########################################
#ARGS
#parser = argparse.ArgumentParser(__file__, description="lxc wizard to generate containers")
parser = argparse.ArgumentParser()
parser.add_argument("--update", "-u", action="store_const", const="True")
parser.add_argument("--create", "-cr", action="store_const", const="True")
parser.add_argument("--cache", "-c", action="store_const", const="True")
parser.add_argument("--container", "-cont", action="store_const", const="True")
parser.add_argument('--lvm', '-lvm', help='lvm help')
parser.add_argument('--fqdn', '-fqdn', help='fqdn help')
parser.add_argument('--size', '-size', help='disk size help')
parser.add_argument('--ram', '-ram', help='ram size help')
#parser.add_argument("help", help="The message to repeat", type=str)

args = parser.parse_args()

#FUNCTIONS#
def lxc_config_file():
    
    "This generates a generic lxc config for containers"
    config_file = open('/var/lib/lxc/'+args.fqdn+'/config','a')
    print >>config_file, "lxc.utsname = ", args.fqdn
    print >>config_file, "lxc.network.type = veth"
    print >>config_file, "lxc.network.flags = up"
    print >>config_file, "lxc.network.link = br0"
    print >>config_file, "#lxc.network.hwaddr = xx:xx:xx:xx:xx:xx"
    print >>config_file, "#lxc.network.ipv4 = 192.168.1.x"
    print >>config_file, "#lxc.network.veth.pair = veth-"+args.fqdn
    print >>config_file, "lxc.tty = 1"
    print >>config_file, "lxc.pts = 1024"
    print >>config_file, "#Memory"
    print >>config_file, "lxc.cgroup.memory.limit_in_bytes = " +args.ram+"M"
    print >>config_file, "lxc.cgroup.memory.memsw.limit_in_bytes = "+args.ram+"M"
    print >>config_file, "lxc.cgroup.blkio.weight = 100"
    print >>config_file, "# Lxc isolation"
    print >>config_file, "#lxc.cap.drop = sys_module mac_admin mac_override sys_time sys_admin"
    print >>config_file, "lxc.rootfs = /var/lib/lxc/"+args.fqdn+"/rootfs"
    print >>config_file, "lxc.cgroup.devices.deny = a"
    print >>config_file, "# /dev/null and zero"
    print >>config_file, "lxc.cgroup.devices.allow = c 1:3 rwm"
    print >>config_file, "lxc.cgroup.devices.allow = c 1:5 rwm"
    print >>config_file, "# consoles"
    print >>config_file, "lxc.cgroup.devices.allow = c 5:1 rwm"
    print >>config_file, "lxc.cgroup.devices.allow = c 5:0 rwm"
    print >>config_file, "lxc.cgroup.devices.allow = c 4:0 rwm"
    print >>config_file, "lxc.cgroup.devices.allow = c 4:1 rwm"
    print >>config_file, "# /dev/{,u}random"
    print >>config_file, "lxc.cgroup.devices.allow = c 1:9 rwm"
    print >>config_file, "lxc.cgroup.devices.allow = c 1:8 rwm"
    print >>config_file, "lxc.cgroup.devices.allow = c 136:* rwm"
    print >>config_file, "lxc.cgroup.devices.allow = c 5:2 rwm"
    print >>config_file, "# rtc"
    print >>config_file, "lxc.cgroup.devices.allow = c 254:0 rwm"
    print >>config_file, "# mounts point"
    print >>config_file, "lxc.mount.entry=proc /var/lib/lxc/"+args.fqdn+"/rootfs/proc proc nodev,noexec,nosuid 0 0"
    print >>config_file, "lxc.mount.entry=devpts /var/lib/lxc/"+args.fqdn+"/rootfs/dev/pts devpts defaults 0 0"
    print >>config_file, "lxc.mount.entry=sysfs /var/lib/lxc/"+args.fqdn+"/rootfs/sys sysfs defaults  0 0"
    print >>config_file, "lxc.mount.entry=/etc/hostname /var/lib/lxc/"+args.fqdn+"/rootfs/etc/host none ro,bind 0 0"
    config_file.close()

#parser = argparse.ArgumentParser(__file__, description="lxc wizard to generate containers")
#parser = argparse.ArgumentParser()
#parser.add_argument("--update", "-u", action="store_const", const="True")
#parser.add_argument("--create", "-cr", action="store_const", const="True")
#parser.add_argument("--cache", "-c", action="store_const", const="True")
#parser.add_argument("--container", "-cont", action="store_const", const="True")
#parser.add_argument('--lvm', '-lvm', help='lvm help')
#parser.add_argument('--fqdn', '-fqdn', help='fqdn help')
#parser.add_argument('--size', '-size', help='disk size help')
#parser.add_argument('--ram', '-ram', help='ram size help')
#parser.add_argument("help", help="The message to repeat", type=str)

#args = parser.parse_args()

#print parser.parse_args()

if args.update == "True":
    FNULL = open(os.devnull, 'w')
    os.chdir( myvars['Cache'] )
    os.chroot( myvars['Cache'] )
    subprocess.call(['apt-get', 'update'],stdout=FNULL, stderr=subprocess.STDOUT)
    subprocess.call(['apt-get', '-y', 'upgrade'])
    #subprocess.call(['apt-get', '-y', 'install', 'less', 'wget'])
    print "\n cache located at", myvars['Cache'], "has been updated \n"

elif args.cache == "True":
    print "Cache is located", myvars['Cache'], "based on", myvars['Arch'], "Architecture"

elif args.create == "True":
    subprocess.call(['debootstrap', '--verbose', '--variant=minbase', '--arch='+myvars['Arch'], '--include='+myvars['Packages'], myvars['Dist'], myvars['Cache'], myvars['RemoteUrl']])
    subprocess.call(['touch', myvars['Cache']+'etc/host'])
    exit ()
elif args.container == "True":
    subprocess.call(['lvcreate', '-n', args.fqdn, '-L', args.size, myvars['VGName']])
    subprocess.call(['mkdir', '/var/lib/lxc/'+args.fqdn])
    f = open('/etc/fstab','a')
    print >>f, "/dev/Default/"+args.fqdn, "/var/lib/lxc/"+args.fqdn, "ext4    noatime  0 2"
    f.close()
    subprocess.call(['mkfs.ext4', '/dev/Default/'+args.fqdn])
    subprocess.call(['mount', '/var/lib/lxc/'+args.fqdn])
    subprocess.call(['mkdir', '/var/lib/lxc/'+args.fqdn+'/rootfs'])
    subprocess.call(['rsync', '-azA', '--numeric-ids', myvars['Cache'], '/var/lib/lxc/'+args.fqdn+'/rootfs/'])
    lxc_config_file()
#    subprocess.call(['lxc-create', '-n', args.fqdn, '-t', myvars['Dist']])
#     print "lxc-create -t", args.fqdn, args.lvm, "-t" , myvars['Dist']
#    print args.fqdn
    exit ()

else:
#    print "Creating a", myvars['Dist'], "lxc container for",  myvars['Cache'], myvars['Arch'], "Architecture"
     print "got caught by else so consider running with --help\n"
     print "printing variables so you can debug if needed\n"
     print parser.parse_args()
     exit()

###########################################

# lxc-create -n test1234.sklav -t wheezy -B lvm --lvname test1234.sklav --vgname Default --fstype ext4 --fssize 8G 
#subprocess.call("date")

#print "Creating a", myvars['Dist'], "lxc container for",  myvars['Cache'], myvars['Arch'], "Architecture"

#subprocess.call(['debootstrap', myvars['Dist'], myvars['Cache'], myvars['RemoteUrl']])
#
#def lxc_config_file():
#	"This generates a generic lxc config for containers"
#	config_file = open('/var/lib/lxc/'+args.fqdn+'/config','a')
#    	print >>config_file, "lxc.utsname = ", args.fqdn
#	print >>config_file, "lxc.network.type = veth"
#        print >>config_file, "lxc.network.flags = up"
#        print >>config_file, "lxc.network.link = br0"
#        print >>config_file, "#lxc.network.hwaddr = xx:xx:xx:xx:xx:xx"
#        print >>config_file, "#lxc.network.ipv4 = 192.168.1.x"
#        print >>config_file, "#lxc.network.veth.pair = veth-"+args.fqdn
#        print >>config_file, "lxc.tty = 1"
#        print >>config_file, "lxc.pts = 1024"
#        print >>config_file, "#Memory"
#        print >>config_file, "lxc.cgroup.memory.limit_in_bytes =" +args.ram+"M"
#        print >>config_file, "lxc.cgroup.memory.memsw.limit_in_bytes ="+args.ram+"M"
#        
#        print >>config_file, "#Disk IO"
#        print >>config_file, "lxc.cgroup.cpu.shares = 256"
#        print >>config_file, "lxc.cgroup.blkio.weight = 100"
#       
#        print >>config_file, "# Lxc isolation"
#        print >>config_file, "#lxc.cap.drop = sys_module mac_admin mac_override sys_time sys_admin"
#        
#        print >>config_file, "lxc.rootfs = /var/lib/lxc/args.fqdn/rootfs"
#        print >>config_file, "lxc.cgroup.devices.deny = a"
#        print >>config_file, "# /dev/null and zero"
#        print >>config_file, "lxc.cgroup.devices.allow = c 1:3 rwm"
#        print >>config_file, "lxc.cgroup.devices.allow = c 1:5 rwm"
#        print >>config_file, "# consoles"
#        print >>config_file, "lxc.cgroup.devices.allow = c 5:1 rwm"
#        print >>config_file, "lxc.cgroup.devices.allow = c 5:0 rwm"
#        print >>config_file, "lxc.cgroup.devices.allow = c 4:0 rwm"
#        print >>config_file, "lxc.cgroup.devices.allow = c 4:1 rwm"
#        print >>config_file, "# /dev/{,u}random"
#        print >>config_file, "lxc.cgroup.devices.allow = c 1:9 rwm"
#        print >>config_file, "lxc.cgroup.devices.allow = c 1:8 rwm"
#        print >>config_file, "lxc.cgroup.devices.allow = c 136:* rwm"
#        print >>config_file, "lxc.cgroup.devices.allow = c 5:2 rwm"
#        print >>config_file, "# rtc"
#        print >>config_file, "lxc.cgroup.devices.allow = c 254:0 rwm"
#        
#        print >>config_file, "# mounts point"
#        print >>config_file, "lxc.mount.entry=proc /var/lib/lxc/"+args.fqdn+"/rootfs/proc proc nodev,noexec,nosuid 0 0"
#        print >>config_file, "lxc.mount.entry=devpts /var/lib/lxc/"+args.fqdn+"/rootfs/dev/pts devpts defaults 0 0"
#        print >>config_file, "lxc.mount.entry=sysfs /var/lib/lxc/"+args.fqdn+"/rootfs/sys sysfs defaults  0 0"
#        print >>config_file, "lxc.mount.entry=/etc/hostname /var/lib/lxc/"+args.fqdn+"/rootfs/etc/host none ro,bind 0 0"
#	config_file.close()
#
