#!/usr/bin/python

##################################################################
#                                                                #
# Copyright (C) 2014 Nick Sklavenitis                            #
# Work in progress it will break things you have been warned.    #
#                                                                #
##################################################################

import platform
import subprocess
import argparse
import os

####VARIABLES###############################
Dist = 'wheezy' # OS codename
Arch = 'amd64' #i386 or amd64

myvars = {
   'Version':'0.7',
   'Os':'Debian',
   'VGName':'Default',
   'ContainerLocation':'/var/lib/lxc/',
   'Cache':'/var/cache/lxc/'+Dist+'/'+Arch+'/',
   'RemoteUrl':'http://ftp.ca.debian.org/debian',
   'Packages':'ifupdown,locales,libui-dialog-perl,dialog,netbase,net-tools,iproute,openssh-server,vim',
}

####ARGS####################################
#parser = argparse.ArgumentParser(__file__, description="lxc wizard to generate containers")
parser = argparse.ArgumentParser(prog='lxc-pywizard')
parser.add_argument("-u", "--update", action="store_const", const="True", help='updates the cached image used by lxc-pywizard')
parser.add_argument("-cr", "--create", action="store_const", const="True", help='creates the cached image needed by lxc-pywizard')
parser.add_argument("-c", "--cache", action="store_const", const="True", help='prints location of current cache')
parser.add_argument("-cnt", "--container", action="store_const", const="True", help='required trigger to create a container')
parser.add_argument('-lvm', '--lvm', action="store", default="yes", help='use lvm for container default is yes other option in no')
parser.add_argument('-fqdn', '--fqdn', help='fully qualifies domain name required')
parser.add_argument('-size', '--size', action="store", default="2G", help='disk size specified with M or G default is 2G')
parser.add_argument('-ram', '--ram', action="store", default="512M", help='ram size specified with M or G default is 512M')
parser.add_argument('-fs', '--fs', action="store", default="ext4", help='filesystem type example ext4 ext3 xfs default is ext4')
parser.add_argument("-v", "-V", "--version", action="store_const", const="True", help='displays version information')
#parser.add_argument("help", help="The message to repeat", type=str)
args = parser.parse_args()

###FUNCTIONS################################

from lxc_config_file import lxc_config_file
from lxc_inittab_file import lxc_inittab_file
from lxc_hostname_file import lxc_hostname_file

############################################

if args.update == "True":
	if os.path.exists( myvars['Cache'] ) == True:
		FNULL = open(os.devnull, 'w')
		os.chdir( myvars['Cache'] )
		os.chroot( myvars['Cache'] )
		subprocess.call(['apt-get', 'update'],stdout=FNULL, stderr=subprocess.STDOUT)
		subprocess.call(['apt-get', '-y', 'upgrade'])
		print "\ncurrently active cache located at", myvars['Cache'], "has been updated \n"
	else:
		print "No cache to update consider running lxc-pywizard --create first"
		exit ()

elif args.cache == "True":
	if os.path.exists( myvars['Cache'] ) == False:
                print "Cache Directory does not exists.. consider running lxc-pywizard --create first"
                exit ()
        else:
        	print "Currently active cache is located", myvars['Cache'], "based on", Arch, "Architecture"
        	exit ()

elif args.create == "True":
	if os.path.exists( myvars['Cache'] ) == True:
		print "Cache Directory already exists.. Will not recreate it"
		exit ()
	else:
		print "Creating cache directory", myvars['Cache'], " "
		subprocess.call(['debootstrap', '--verbose', '--variant=minbase', '--arch='+Arch, '--include='+myvars['Packages'], Dist, myvars['Cache'], myvars['RemoteUrl']])
		subprocess.call(['touch', myvars['Cache']+'etc/host'])
		exit ()

elif args.container == "True" and args.lvm == "yes":
	if os.path.exists( '/dev/'+myvars['VGName']+'/'+args.fqdn ) == True:
		print "Looks like this lvm partition /dev/"+myvars['VGName']+"/"+args.fqdn, " already exists... exiting"
		exit ()
	else:
		subprocess.call(['lvcreate', '-n', args.fqdn, '-L', args.size, myvars['VGName']])
		subprocess.call(['mkdir', myvars['ContainerLocation']+args.fqdn])
		f = open('/etc/fstab','a')
		print >>f, "/dev/"+myvars['VGName']+"/"+args.fqdn, myvars['ContainerLocation']+args.fqdn, args.fs+"    noatime  0 2"
		f.close()
		subprocess.call(['mkfs.'+args.fs, "/dev/"+myvars['VGName']+"/"+args.fqdn])
		subprocess.call(['mount', myvars['ContainerLocation']+args.fqdn])
		subprocess.call(['mkdir', myvars['ContainerLocation']+args.fqdn+'/rootfs'])
		subprocess.call(['rsync', '-azA', '--numeric-ids', myvars['Cache'], myvars['ContainerLocation']+args.fqdn+'/rootfs/'])
		lxc_config_file(args.fqdn, args.ram)
		lxc_inittab_file(args.fqdn)
		lxc_hostname_file(args.fqdn)
		print "container", args.fqdn, "has been created successfully"
		exit ()

elif args.container == 'True' and args.lvm == 'no':
	if os.path.exists( myvars['ContainerLocation']+args.fqdn ) == True:
                print "Looks like this container", myvars['ContainerLocation']+args.fqdn, "already exists... exiting"
                exit ()
        else:
                subprocess.call(['mkdir', myvars['ContainerLocation']+args.fqdn])
                subprocess.call(['mkdir', myvars['ContainerLocation']+args.fqdn+'/rootfs'])
                subprocess.call(['rsync', '-azA', '--numeric-ids', myvars['Cache'], myvars['ContainerLocation']+args.fqdn+'/rootfs/'])
                lxc_config_file(args.fqdn, args.ram)
                lxc_inittab_file(args.fqdn)
                lxc_hostname_file(args.fqdn)
                print "container", args.fqdn, "has been created successfully"
                exit ()

elif args.version == "True":
    print "lxc-pywizard version", myvars['Version']
    exit ()

else:
#    print "Creating a", myvars['Dist'], "lxc container for",  myvars['Cache'], myvars['Arch'], "Architecture"
     print "got caught by else so consider running with --help\n"
     print "printing variables so you can debug if needed\n"
     print parser.parse_args()
     exit()

###########################################
