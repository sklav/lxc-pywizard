#!/usr/bin/python

##################################################################
#                                                                #
# Copyright (C) 2014 Nick Sklavenitis                            #
# Work in progress it will break things you have been warned.    #
#                                                                #
##################################################################

import platform
import subprocess
import argparse
import os

####VARIABLES###############################
myvars = {
   'Os':'Debian',
   'VGName':'Default',
   'Dist':'wheezy',
   'Arch':'amd64',
   'Cache':'/var/cache/lxc/test123456/',
   'RemoteUrl':'http://ftp.ca.debian.org/debian',
   'Packages':'ifupdown,locales,libui-dialog-perl,dialog,netbase,net-tools,iproute,openssh-server,vim',
}

####ARGS####################################
#parser = argparse.ArgumentParser(__file__, description="lxc wizard to generate containers")
parser = argparse.ArgumentParser()
parser.add_argument("--update", "-u", action="store_const", const="True")
parser.add_argument("--create", "-cr", action="store_const", const="True")
parser.add_argument("--cache", "-c", action="store_const", const="True")
parser.add_argument("--container", "-cont", action="store_const", const="True")
parser.add_argument('--lvm', '-lvm', help='lvm help')
parser.add_argument('--fqdn', '-fqdn', help='fqdn help')
parser.add_argument('--size', '-size', help='disk size help')
parser.add_argument('--ram', '-ram', help='ram size help')
#parser.add_argument("help", help="The message to repeat", type=str)

args = parser.parse_args()

###FUNCTIONS################################

import lxc_config_file
import lxc_inittab_file

############################################

if args.update == "True":
    FNULL = open(os.devnull, 'w')
    os.chdir( myvars['Cache'] )
    os.chroot( myvars['Cache'] )
    subprocess.call(['apt-get', 'update'],stdout=FNULL, stderr=subprocess.STDOUT)
    subprocess.call(['apt-get', '-y', 'upgrade'])
    #subprocess.call(['apt-get', '-y', 'install', 'less', 'wget'])
    print "\n cache located at", myvars['Cache'], "has been updated \n"

elif args.cache == "True":
    print "Cache is located", myvars['Cache'], "based on", myvars['Arch'], "Architecture"

elif args.create == "True":
    subprocess.call(['debootstrap', '--verbose', '--variant=minbase', '--arch='+myvars['Arch'], '--include='+myvars['Packages'], myvars['Dist'], myvars['Cache'], myvars['RemoteUrl']])
    subprocess.call(['touch', myvars['Cache']+'etc/host'])
    exit ()
elif args.container == "True":
    subprocess.call(['lvcreate', '-n', args.fqdn, '-L', args.size, myvars['VGName']])
    subprocess.call(['mkdir', '/var/lib/lxc/'+args.fqdn])
    f = open('/etc/fstab','a')
    print >>f, "/dev/Default/"+args.fqdn, "/var/lib/lxc/"+args.fqdn, "ext4    noatime  0 2"
    f.close()
    subprocess.call(['mkfs.ext4', '/dev/Default/'+args.fqdn])
    subprocess.call(['mount', '/var/lib/lxc/'+args.fqdn])
    subprocess.call(['mkdir', '/var/lib/lxc/'+args.fqdn+'/rootfs'])
    subprocess.call(['rsync', '-azA', '--numeric-ids', myvars['Cache'], '/var/lib/lxc/'+args.fqdn+'/rootfs/'])
    lxc_config_file()
    lxc_inittab_file()
    exit ()

else:
#    print "Creating a", myvars['Dist'], "lxc container for",  myvars['Cache'], myvars['Arch'], "Architecture"
     print "got caught by else so consider running with --help\n"
     print "printing variables so you can debug if needed\n"
     print parser.parse_args()
     exit()

###########################################
